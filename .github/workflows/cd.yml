# Name of the GitHub Actions workflow
name: CD

# The triggers for the workflow: push to main branch and pull requests
on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]
    branches: ["main"]

# Definition of jobs to be run
jobs:
  # First job to publish Docker images to Azure Container Registry (ACR)
  publish:
    # Runs the job on the latest version of Ubuntu
    runs-on: ubuntu-latest
    # Environmental variables used in the job
    env:
      ACR_NAME: spContaineRegistry
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      DOCKER_COMPOSE_FILE: docker-compose.yml
      COMMIT_HASH: ${{ github.sha }}
    steps:
      # Checks out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Logs into the ACR using Azure's Docker login action
      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Sets up Docker Buildx for building Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Caches Docker layers to improve build speed
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Builds Docker images using Docker Compose
      - name: Build docker images
        run: |
          DOCKER_BUILDKIT=1 docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} build --parallel

      # Tags and pushes Docker images to ACR
      - name: Push Docker images to ACR
        run: |
          docker tag individual-krakend:latest ${{ env.ACR_NAME }}.azurecr.io/krakend:${{ env.COMMIT_HASH }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/krakend:${{ env.COMMIT_HASH }}

          docker tag individual-user-service:latest ${{ env.ACR_NAME }}.azurecr.io/user-service:${{ env.COMMIT_HASH }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/user-service:${{ env.COMMIT_HASH }}

          docker tag individual-tweet-service:latest ${{ env.ACR_NAME }}.azurecr.io/tweet-service:${{ env.COMMIT_HASH }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/tweet-service:${{ env.COMMIT_HASH }}

          docker tag individual-timeline-service:latest ${{ env.ACR_NAME }}.azurecr.io/timeline-service:${{ env.COMMIT_HASH }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/timeline-service:${{ env.COMMIT_HASH }}

  # Second job to deploy the Docker images to Azure Kubernetes Service (AKS)
  deploy:
    # Runs the job on the latest version of Ubuntu
    runs-on: ubuntu-latest
    # Specifies that this job requires the 'publish' job to be completed successfully
    needs: publish
    env:
      COMMIT_HASH: ${{ github.sha }}
    steps:
      # Checks out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Deploys to AKS by applying the Kubernetes configuration
      - name: Deploy to AKS
        working-directory: k8s
        env:
          KUBECONFIG_FILE: kubeconfig.yaml
        # Writes the KUBECONFIG secret to a file for kubectl to use
        # Replaces the placeholder in kustomization.yaml with the actual commit hash
        # Applies the Kubernetes configuration using kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" > ${{ env.KUBECONFIG_FILE }}
          export KUBECONFIG=${{ env.KUBECONFIG_FILE }}
          sed -i 's/CICD_PLACEHOLDER/${{ env.COMMIT_HASH }}/' kustomization.yaml
          kubectl kustomize . | kubectl apply -f -
